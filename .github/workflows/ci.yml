name: CI Workflow

'on':
  pull_request:
  push:
    branches:
      - main

permissions:
  checks: write
  contents: write
  deployments: write
  statuses: write

jobs:
  dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.4.0'
      - name: Install dependencies
        run: npm install
      - name: Install Angular CLI
        run: npm install -g @angular/cli

  tests:
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.4.0'
      - name: Run tests
        run: npm run test:coverage
      - name: Create test badge
        run: |
          npm install -g badge-maker
          if [ $? -eq 0 ]; then
            npx badge-maker "tests" "passed" :green > test-badge.svg
          else
            npx badge-maker "tests" "failed" :red > test-badge.svg
          fi
      - name: Create coverage badge
        run: |
          TOTAL_LINES=$(grep -E 'DA:[0-9]+,[0-9]+' coverage/lcov.info | wc -l)
          COVERED_LINES=$(grep -E 'DA:[0-9]+,1' coverage/lcov.info | wc -l)
          COVERAGE=$(awk "BEGIN {printf \"%.2f\",(${COVERED_LINES}/${TOTAL_LINES})*100}")
          if [ COVERAGE -ge 80 ]; then
            npx badge-maker "coverage" "${COVERAGE}%" :green > coverage-badge.svg
          else
            npx badge-maker "coverage" "${COVERAGE}%" :red > coverage-badge.svg
          fi
      - name: Commit badges
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          if git diff --quiet; then
            git add test-badge.svg coverage-badge.svg
            git commit -m "Add test and coverage badges"
            git push
          fi

#  sonarqube:
#    runs-on: ubuntu-latest
#    needs: tests
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: '22.4.0'
#      - name: Start SonarQube
#        run: docker-compose -f docker-compose.sonar.yml up -d
#      - name: Wait for SonarQube to be up
#        run: |
#          echo "Waiting for SonarQube to be up..."
#          until curl -s http://localhost:9000/api/system/status | grep -q "UP"; do
#            sleep 5
#          done
#      - name: Run SonarQube scan
#        run: npm run sonar-scan
#      - name: Stop SonarQube
#        run: docker-compose -f docker-compose.yml down
#      - name: Create SonarQube badge
#        run: |
#          npm install -g badge-maker
#          if [ $? -eq 0 ]; then
#            npx badge-maker "sonarqube" "passed" > sonarqube-badge.svg
#          else
#            npx badge-maker "sonarqube" "failed" > sonarqube-badge.svg
#      - name: Commit SonarQube badge
#        run: |
#          git config --global user.email "github-actions[bot]@users.noreply.github.com"
#          git config --global user.name "github-actions[bot]"
#          git add sonarqube-badge.svg
#          git commit -m "Add SonarQube badge"
#          git push

  deploy:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.4.0'
      - name: Create environment directory
        run: mkdir -p ./src/environments
      - name: Create environment files
        run: echo "export const environment = ${{ secrets.ENVIRONMENT }};" > ./src/environments/environment.prod.ts
      - name: Build Angular app
        run: npm run build
      - name: Deploy to Firebase Hosting on Preview
        if: github.event_name == 'pull_request'
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_PORTFOLIO_63FF4 }}'
          projectId: portfolio-63ff4
      - name: Deploy to Firebase Hosting on Production
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_PORTFOLIO_63FF4 }}'
          channelId: live
          projectId: portfolio-63ff4
